{"version":3,"sources":["updateAll.js"],"names":["global","fetch","require","UpdateAll","Component","constructor","props","state","exchanges","logs","componentDidMount","then","response","json","startJobs","map","e","lastBlockCheck","exchange","push","symbol","setState","render","l","propTypes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;AACAA,MAAM,CAACC,KAAP,GAAeC,OAAO,CAAC,YAAD,CAAtB,EAEA;;AAEA,MAAMC,SAAN,SAAwBC,gBAAxB,CAAkC;AAE9BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE,EADF;AAETC,MAAAA,IAAI,EAAE;AAFG,KAAb;AAIH;;AAED,QAAMC,iBAAN,CAAwBJ,KAAxB,EAA+B;AAC3B,UAAME,SAAS,GAAG,MAAMP,KAAK,CAAE,oCAAF,CAAL,CAA4CU,IAA5C,CAAiDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAA7D,CAAxB;AACA,SAAKC,SAAL,CAAeN,SAAf;AACH;;AAED,QAAMM,SAAN,CAAgBN,SAAhB,EAA2B;AACvB,QAAIC,IAAI,GAAG,EAAX;AACAD,IAAAA,SAAS,CAACO,GAAV,CAAeC,CAAC,IAAI;AAChB,UAAG,CAACA,CAAC,CAACC,cAAN,EAAsB;AAClBhB,QAAAA,KAAK,CAAE,8CAA6C,KAAKK,KAAL,CAAWY,QAAS,SAAnE,CAAL,CAAkFP,IAAlF,CAAuFC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAAnG;AACAJ,QAAAA,IAAI,CAACU,IAAL,CAAW,wBAAuBH,CAAC,CAACI,MAAO,eAA3C;AACH;AACJ,KALD;AAMA,SAAKC,QAAL,CAAc;AACVZ,MAAAA;AADU,KAAd;AAGH;;AAEDa,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEb,MAAAA;AAAF,QAAW,KAAKF,KAAtB;AACA,WAAOE,IAAI,CAACM,GAAL,CAASQ,CAAC,IAAI,6BAAC,UAAD;AAAO,MAAA,KAAK;AAAZ,OAAcA,CAAd,CAAd,CAAP;AACH;;AAhC6B;;AAmClCpB,SAAS,CAACqB,SAAV,GAAsB,EAAtB;eAGerB","file":"updateAll.js","sourceRoot":"../../commands","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {Text, Color} from 'ink';\nglobal.fetch = require(\"node-fetch\");\n\n/// This is my command description\n\nclass UpdateAll extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            exchanges: [],\n            logs: []\n        }\n    }\n\n    async componentDidMount(props) {\n        const exchanges = await fetch(`http://localhost:8000/api/unipools`).then(response => response.json())\n        this.startJobs(exchanges)\n    }\n\n    async startJobs(exchanges) {\n        let logs = [];\n        exchanges.map( e => {\n            if(!e.lastBlockCheck) {\n                fetch(`http://localhost:8000/api/unipool/exchange/${this.props.exchange}/update`).then(response => response.json());\n                logs.push(`Indexing of data for ${e.symbol} in progress.`);\n            }\n        })\n        this.setState({\n            logs\n        })\n    }\n\n    render() {\n        const { logs } = this.state;\n        return(logs.map(l => <Color green>{l}</Color>))\n    }\n}\n\nUpdateAll.propTypes = {\n};\n\nexport default UpdateAll;"]}